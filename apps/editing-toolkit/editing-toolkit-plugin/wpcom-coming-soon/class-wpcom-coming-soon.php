<?php
/**
 * Coming Soon
 *
 * @package A8C\FSE
 */

namespace A8C\FSE;

/**
 * Class WPCOM_Coming_Soon
 */
class WPCOM_Coming_Soon {
	/**
	 * Class instance.
	 *
	 * @var WPCOM_Coming_Soon
	 */
	private static $instance = null;

	/**
	 * WPCOM_Coming_Soon constructor.
	 */
	private function __construct() {
		add_filter( 'pre_get_posts', array( $this, 'exclude_from_public_queries' ), 10, 2 );

		// @TODO I think the sitemap is generated by a cron job
		// so we'll need to find out how it works
		add_filter( 'jetpack_sitemap_skip_post', array( $this, 'exclude_from_sitemap' ), 10, 2 );

		// @TODO this is a filter used in an older version of a mu-plugin/sitemap
		add_filter( 'sitemap_skip_post', array( $this, 'exclude_from_sitemap' ), 10, 2 );

		// $id = (int) get_option( 'wpcom_public_coming_soon_page_id', 0 );
		// if ( ! empty( $id ) ) {
		// delete_post_meta( $id, '_sitemap_priority' );
		// update_post_meta( $id, '_sitemap_exclude', '1' );
		// l( '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<' );
		// l( get_post_meta( ) );
		// }
	}

	/**
	 * Creates instance.
	 *
	 * @return \A8C\FSE\WPCOM_Coming_Soon
	 */
	public function init() {
		if ( is_null( self::$instance ) ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Check whether we should show a coming soon page.
	 *
	 * @TODO how are we to override any default behaviour for free simple sites?
	 * On free simple sites we want to show a default coming soon page.
	 *
	 * @return bool True if the coming soon feature is enabled. False otherwise.
	 */
	public static function should_show_coming_soon_page() {
		if ( is_user_logged_in() && current_user_can( 'read' ) ) {
			return false;
		}

		// Allow anonymous previews.
		//phpcs:ignore -- non-nonced check is intended
		if ( isset( $_GET['preview'] ) ) {
			return false;
		}

		return (int) get_option( 'wpcom_public_coming_soon' ) === 1;
	}

	/**
	 * Get the coming soon page id.
	 *
	 * @return int The coming soon page id to use.
	 */
	public static function coming_soon_page_id() {
		return (int) get_option( 'wpcom_public_coming_soon_page_id', 0 );
	}

	/**
	 * Get the coming soon page.
	 *
	 * @return mixed The coming soon post or page as returned by get_post.
	 */
	public static function coming_soon_page() {
		$id = self::coming_soon_page_id();

		if ( ! empty( $id ) ) {
			return get_post( $id );
		}

		return false;
	}

	/**
	 * Excludes sitemap items by post ID.
	 *
	 * @since 2018-05-04
	 *
	 * @param  bool               $exclude True if excluding.
	 * @param  \WP_Post|\StdClass $post    Post object associated with the item.
	 *
	 * @return bool                        Filtered exclusion. True if excluding.
	 *
	 * @internal Site owners can add a custom field '_sitemap_exclude` to adjust this.
	 */
	public function exclude_from_sitemap( $exclude, $post ) {
		$exclude = (bool) $exclude;

		$id = self::coming_soon_page_id();

		if ( ! empty( $id ) && $post->ID === $id ) {
			$exclude = (bool) apply_filters( 'wpcom_sitemaps_exclude_post', true, get_post( $id ) );
		}

		return $exclude;
	}

	/**
	 * Exclude from public queries
	 *
	 * @param \WP_Query $query The main query.
	 */
	public function exclude_from_public_queries( $query ) {
		$id = self::coming_soon_page_id();

		if ( ! empty( $id ) && ! is_admin() && $query->is_main_query() ) {
			$query->set( 'post__not_in', array( $id ) );
		}
	}

	/**
	 * Display Coming Soon Page
	 */
	public static function display_coming_soon_page() {
		// Only show coming soon if feature is enabled.
		if ( ! self::should_show_coming_soon_page() ) {
			return;
		}

		// Disable a few floating UI things.
		add_filter( 'wpcom_disable_logged_out_follow', '__return_true', 1, 999 );
		add_filter( 'wpl_is_enabled_sitewide', '__return_false', 1, 999 );

		$page = self::coming_soon_page();

		if ( ! empty( $page ) && ! is_wp_error( $page ) ) {
			self::render_coming_soon( $page );
		} else {
			self::render_coming_soon_fallback();
		}

		die();
	}

	/**
	 * Render coming soon page.
	 *
	 * @param \WP_Post $page The coming soon page to render.
	 */
	public static function render_coming_soon( $page ) {
		?><!doctype html>
		<html <?php language_attributes(); ?>>
			<head>
				<meta charset="<?php bloginfo( 'charset' ); ?>" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<?php wp_head(); ?>
			</head>
			<body>
				<?php
					//phpcs:ignore -- relying on the_content filters for escaping.
					echo apply_filters( 'the_content', $page->post_content );
				?>
				<?php wp_footer(); ?>
			</body>
		</html>
		<?php
	}

	/**
	 * Render Fallback Coming Soon Page
	 */
	public static function render_coming_soon_fallback() {
		remove_action( 'wp_enqueue_scripts', 'wpcom_actionbar_enqueue_scripts', 101 );
		remove_action( 'wp_head', 'print_emoji_detection_script', 7 );
		remove_action( 'wp_print_styles', 'print_emoji_styles' );
		remove_action( 'wp_head', 'header_js', 5 );
		remove_action( 'wp_head', 'global_css', 5 );
		remove_action( 'wp_footer', 'wpcom_subs_js' );
		remove_action( 'wp_footer', 'stats_footer', 101 );

		wp_enqueue_style(
			'wpcom-coming-soon',
			plugin_dir_url( __FILE__ ) . 'dist/wpcom-coming-soon.css',
			array(),
			filemtime( __DIR__ . '/dist/wpcom-coming-soon.css' )
		);

		if ( ! is_user_logged_in() ) {
			//phpcs:ignore
			wp_enqueue_style( 'buttons', '/wp-includes/css/buttons.css' );
		}

		include __DIR__ . '/fallback-coming-soon-page.php';
	}

}

add_action( 'init', __NAMESPACE__ . '\WPCOM_Coming_Soon::init' );
add_action( 'wp', __NAMESPACE__ . '\WPCOM_Coming_Soon::display_coming_soon_page' );
